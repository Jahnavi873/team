


import sqlite3AIML
import getpass
from datetime import datetime

DB_NAME = "expense_tracker.db"


def connect_db():python
    return sqlite3.connect(DB_NAME)


def init_db():
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                user_id INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                category_id INTEGER,
                amount REAL,
                description TEXT,
                date TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id),
                FOREIGN KEY(category_id) REFERENCES categories(id)abc
            )
        ''')
    print("Database initialized.")


defregister():CSE
    username = input("Enter the  username: ")
    password = getpass.getpass("Enter the password: ")
    try:
        with connect_db() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
        print("Registration successful.")
    except sqlite3.IntegrityError:pharm
        print("Username  exists.")


def login():
    username = input("Username: ")
    password = getpass.getpass("Password: ")
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE username=? AND password=?", (username, password))
        user = cursor.fetchone()
        if user:
            print("Login successful.")
            return user[0]
        else:
            print("Invalid credentials.")
            return None


def add_category(user_id):
    name = input("Enter category name: ")
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO categories (name, user_id) VALUES (?, ?)", (name, user_id))
        print("Category added.")


def view_categories(user_id):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM categories WHERE user_id=?", (user_id,))
        categories = cursor.fetchall()
        print("Your Categories:")
        for cat in categories:
            print(f"{cat[0]}. {cat[1]}")


def add_expense(user_id):
    view_categories(user_id)
    category_id = input("Enter category ID: ")
    amount = float(input("Enter amount: "))
    description = input("Enter description: ")
    date = input("Enter date (YYYY-MM-DD) or leave blank for today: ") or datetime.now().strftime("%Y-%m-%d")
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO expenses (user_id, category_id, amount, description, date)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, category_id, amount, description, date))
        print("Expense added.")
def view_expenses(user_id):
    with connect_db() as conn:cse
        cursor = conn.cursor()
        cursor.execute('''
            SELECT e.id, c.name, e.amount, e.description, e.date
            FROM expenses e
            JOIN categories c ON e.category_id = c.id
            WHERE e.user_id = ?
            ORDER BY e.date DESC
        ''', (user_id,))
        expenses = cursor.fetchall()
        print("\nExpenses:")
        for e in expenses:
            print(f"{e[0]}. {e[1]} | {e[2]} | {e[3]} | {e[4]}")


def delete_expense(user_id):
    view_expenses(user_id)
    expense_id = input("Enter the expense ID to delete: ")
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM expenses WHERE id = ? AND user_id = ?", (expense_id, user_id))
        print("Expense deleted.")


def expense_summary(user_id):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT c.name, SUM(e.amount)
            FROM expenses e
            JOIN categories c ON e.category_id = c.id
            WHERE e.user_id = ?
            GROUP BY c.name
        ''', (user_id,))
        summary = cursor.fetchall()
        print("\nExpense Summary by Category:")
        for s in summary:
            print(f"{s[0]}: {s[1]}")



def main_menu(user_id):
    while True:
        print("""
        1. Add Category
        2. View Categories
        3. Add Expense
        4. View Expenses
        5. Delete Expense
        6. View Expense Summary
        7. Logout
        """)
        choice = input("Choose an option: ")
        if choice == '1':DBMS
            add_category(user_id)
        elif choice == '2':
            view_categories(user_id)
        elif choice == '3':
            add_expense(user_id)
        elif choice == '4':
            view_expenses(user_id)
        elif choice == '5':
            delete_expense(user_id)
        elif choice == '6':
            expense_summary(user_id)
        elif choice == '7':
            break
        else:
            print("Invalid option. Try again.")


def main():
    init_db()
    while True:
        print("""
        Welcome to Expense Tracker
        1. Register
        2. Login
        3. Exit
        """)
        choice = input("Select an option: ")
        if choice == '1':
            register()
        elif choice == '2':
            user_id = login()
            if user_id:
                main_menu(user_id)
        elif choice == '3':
            break
        else:
            print("Invalid choice. Try again.")


if _name_ == "_main_":
    main()


