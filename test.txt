
import sqlite3AIML
import getpass
from datetime import datetime

DB_NAME = "expense_tracker.db"


def connect_db():
    return sqlite3.connect(DB_NAME)


def init_db():
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                user_id INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                category_id INTEGER,
                amount REAL,
                description TEXT,
                date TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id),
                FOREIGN KEY(category_id) REFERENCES categories(id)abc
            )
        ''')
    print("Database initialized.")


defregister():CSE
    username = input("Enter new username: ")
    password = getpass.getpass("Enter new password: ")
    try:
        with connect_db() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
        print("Registration successful.")
    except sqlite3.IntegrityError:
        print("Username already exists.")


def login():
    username = input("Username: ")
    password = getpass.getpass("Password: ")
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE username=? AND password=?", (username, password))
        user = cursor.fetchone()
        if user:
            print("Login successful.")
            return user[0]
        else:
            print("Invalid credentials.")
            return None


def add_category(user_id):
    name = input("Enter category name: ")
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO categories (name, user_id) VALUES (?, ?)", (name, user_id))
        print("Category added.")


def view_categories(user_id):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM categories WHERE user_id=?", (user_id,))
        categories = cursor.fetchall()
        print("Your Categories:")
        for cat in categories:
            print(f"{cat[0]}. {cat[1]}")


def add_expense(user_id):
    view_categories(user_id)
    category_id = input("Enter category ID: ")
    amount = float(input("Enter amount: "))
    description = input("Enter description: ")
    date = input("Enter date (YYYY-MM-DD) or leave blank for today: ") or datetime.now().strftime("%Y-%m-%d")
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO expenses (user_id, category_id, amount, description, date)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, category_id, amount, description, date))
        print("Expense added.")



